State 끌어올리기 

    종종 동일한 데이터에 대한 변경사항을 여러 컴포넌트에 반영해야 할 필요가 있다. 
    이럴 때는 가장 가까운 공통 조상으로 state를 끌어올리는 것이 좋다. 

    이런 일을 어떻게 할 수 있는지 지금부터 살펴보자 


    주어진 온도에서 물의 끌ㄴ는 여부를 추정하는 온도 계산기

    function BoilingVerdict(props){
        if(props.celsius>=100){
            return <p>The water would boil.</p>;
        }
        return <p>The water would not boil.</p>;
    }

    그 다음으로 Calculator라는 컴포넌트를 만들어보자. 이 컴포넌트는 온도를 입력할 수 있는 <input>을 렌더링하고 그 값을 this.state.temperature에 저장한다. 


    class Calculator extends React.Component{
        constructor(props){
            super(props);
            this.hanldeChange=this.handleChange.bind(this);
            this.state = {temperature: ''};
        }
    }
    handleChange(e){
        this.setState({temperature: e.target.value});
    }
    render(){
        const temperature = this.state.temperature;
        return (
            <filedset>
                <legend>Enter temperature in Celsius:</legned>
                <input 
                    value={temperature}
                    onChange={this.handleChange}
                />
                <BoilingVerdict
                    celsius={paresFloat(temperature)}
                />
            </fieldset>
        );
    }
    }

    두 번째 input 추가하기 

    새 요구사항으로써 섭씨 입력 필드뿐만 아니라 화씨 입력 필드를 추가하고 두 필드 간에 동기화 상태를 유지하도록 해보자. 
    
    Calculator에서 TemperatureInput 컴포넌트를 빼내는 작업부터 시작해보자. 또한 "C" 또는 "F"의 값을 가질 수 있는 scale prop을 추가할 것이다. 


    const scaleNames={
        c: 'Celsius',
        f: 'Fahrenheit'
    };
    class TemperatureInpt extends React.Component{
        constructor(props){
            super(props);
            this.handleChange = this.handleChange.bind(this);
            this.state = {temperature: ''};
        }
        handleChange(e){
            this.setState({temperature: e.target.value});
        }
        render(){
            const temperature = this.state.temperature;
            const scale = this.props.scale;
            return (
                <fieldset>
                    <legend>Enter temperature in {scaleNames[scale]}:</legend>
                    <input value={temperature}
                           onChange={this.handleChange}
                    />
                </fieldset>
            )
        }
    }
    class Calculator extends React.Component {
        render(){
            return (
                <div>
                    <TemperatureInput scale='c' />
                    <TemperatureInput scale='f' />
                </div>
            )
        }
    }

    이제 두 개의 입력 필드를 갖게 되었다. 그러나 둘 중 하나에 온도를 입력하더라도 다른 하나는 갱신되지 않는 문제가 있다. 이것은 두 입력 필드간에 동기화 상태를 유지하고자 했던 원래 요구사항과는 맞지 않는다.

    또한 Calculator에서 BoilingVerdict도 역시 보여줄 수 없는 상황이다. 현재 입력된 온도 정보가 TemperatureInput 안에 숨겨져 있으므로 Calculator는 그 값을 알 수 없기 때문이다. 

    변환 함수 작성하기 

    먼저 섭씨를 화씨로, 그 반대도 변환 가능한 함수를 작성하자

    function toCelsius(fahrenheit){
        return (fahrenheit-32) *5/9;
    }
    function toFahrenheit(celsius){
        return (celsius *9/5)+32;
    } 

    이 두 함수는 숫자를 변환한다. 이제 temperature문자열과 변환 함수를 인수로 취해서 문자열을 반환하는 또 다른 함수를 작성해보자. 그리고 그것을 한 입력값에 기반해 나머지를 입력값에 계산하는 용도로 사용하자. 

    function tryConvert(temperature, convert){
        const input = parseFloat(tempearture);
        if(Number.isNaN(input)){
            return '';
        }
        const output = convert(input);
        const rounded= Math.round(output*1000)/1000;
        return rounded.toString();
    }
    이 함수는 올바르지 않은 temperature 값에 대해서는 빈 문자열을 반환하고 값을 소수점 세번째 자리로 반올림하여 출력한다. 

    // 예를 들어 tryConvert('abc',toCelsius)는 빈 문자열을 반환하고 tryConvert('10.22',toFahrenheit)는'50.396'을 반환한다. 



    State 끌어올리기 

    현재 두 TemperatureInput 컴포넌트가 각각의 입력값을 각자의 state에 독립적으로 저장하고 있다. 

    class TemperatureInput extends React.Coponent{
        constructor(props){
            super(props);
            this.handleChange = this.handleChange.bind(this);
            this.state = {temperature: ''};
        }
        handleChange(e){
            this.setState({temperature: e.target.value});
        }
        render(){
            const temperature = this.state.temperature;
            .....
        }
    }

    그러나 우리는 두 입력값이 서로의 것과 동기화된 상태로 있길 원한다. 섭씨온도 입력값을 변경할 경우 화씨 온도 입력값 역시 반환된 온도를 반영할 수 있어야 하며 그 반대의 경우도 마찬가지여야 한다. 

    React에서 state를 공유하는 일은 그 값을 필요로 하는 컴포넌트 간의 가장 가까운 공통 조상으로 state를 끌어올림으로써 이뤄낼 수 있다. 이렇게 하는 방법을 "state 끌어올리기"라고 부른다. 이제 TemperatureInput이 개별적으로 가지고 있던 state를 지우는 대신 Calculator로 그 값을 옮겨놓을 것이다. 


    Calculator가 공유될 state를 소유하고 있으면 이 컴포넌트는 두 입력 필드의 현재 온도에 대한 "진리의 원천(source of truth)"이 된다. 이를 통해 두 입력 필드가 서로 간에 일관된 값을 유지하도록 만들 수 있다. 두 TempeartureInput 컴포넌트의 props가 같은 부모인 Calculator로부터 전달되기 떄문에, 두 입력 필드는 항상 동기화된 상태를 유지할 수 있게 된다. 

    이 동작이 어떻게 동작하는지 차근차근 살펴보자. 


    우선, TempeartureInput 컴포넌트에서 this.state.temperature를 this.props.temperature로 대체할 것이다. 지금은 this.props.temperature가 이미 존재한다고 가정해보자. 나중에는 이 값을 Calcuator로부터 건네야 할 것이다. 

    render(){
        //before: const temperature = this.state.temperature;
        const temperature = this.props.temperature;
        //...
    }

    props는 읽기 전용이다. temperature가 지역 state였을 때는 그 값을 변경하기 위해서 그저 TemperatureInput의 this.setState()를 호출하는 걸로 충분했다. 그러나 이제 temperature가 부모로부터 prop로 전달되기 때문에 TemperatureInput은 그 값을 제어할 능력이 없다. 


    React에서는 보통 이문제를 컴포넌트를 "제어" 가능하게 만드는 방식으로 해결한다. DOM <input>이 value와 onChange prop를 건네받는 것과 비슷한 방식으로, 사용자 정의된 TemperatureInput 역시 temperature와 onTemperatureChange props를 자신의 부모인 Calculator로부터 건네받을 수 있다. 


    이제 TemperatureInput에서 온도를 갱신하고 싶으면 this.props.onTemperatureChange를 호출하면 된다. 

    handleChange(e){
        //Before: this.setState({temperature: e.target.value});
        this.props.onTemperatureChange(e.target.value);
        //...
    }

    주의:
    사용자 정의 컴포넌트에서 temperature와 onTemperatureChange prop의 이름이 특별한 의미를 갖지 않는다. 일관된 컨벤션으로 value와 onChange을 사용할 수도 있으며, 여러분이 원하는 그 어떤 이름도 사용가능하다. 


    onTemperatureChange prop은 부모 컴포넌트인 Calculator로부터 temperature prop와 함께 제공될 것이다. 이를 이용해 자신의 지역 state를 수정해서 변경사항을 처리하므로, 변경된 새값을 전달받은 두 입력 필드는 모두 리렌더링될 것이다. Calculator의 새로운 구현체는 조금 뒤에 보자. 

    Calculator의 변경사항을 들여다 보기 전에
    TemperatureInput 컴포넌트에 대한 변경사항부터 요약해보자. 

    이 컴포넌트의 지역 state를 제거했으며 this.state.temperature 대신에 this.props.temperature를 읽어오도록 변경했다. state를 변경하고 싶을 경우 this.setState() 대신에 Calculator로부터 건네받은 this.props.onTemperatureChange()를 호출하도록 만들었다. 

    class temperatureInput extneds React.Coponent{
        constructor(porps){
            super(props);
            this.handleChange = this.handleChange.bind(this);
        }
        handleChange(e){
            this.props.onTemperatureChange(e.target.value);
        }
        render(){
            const temperature = this.props.temperature;
            const scale = this.props.scale;
            return (
                <fieldset>
                    <legend>Enter temperature in {scaleNames[scale]}:</legend>
                    <input value={temperature}
                           onChange={this.handleChange}
                    />
                </fieldset>
            );
        }
    }

    이제 다시 Calculator 컴포넌트를 보자

    tempeature와 scale의 현재 입력값을 이 컴포넌트의 지역 state에 저장한다. 이것은 우리가 입력 필드들로부터 "끌어올린" state이며 그들에 대한 진리의 원천(souce of truth)으로 작용할 것이다. 또한 두 입력 필드를 렌더링하기 위해서 알아야 하는 모든 데이터를 최소한으로 표현한 것이기도 하다. 

    예를 들어서 섭씨 입력 필드에 37을 입력하면 Calculator 컴포넌트의 state는 다음과 같을 것이다. 
    {
        temperature: '37',
        scale: 'c'
    }

    두 입력 필드에 모두 값을 저장하는 일도 가능했지만 결국은 불필요한 작업이었다. 가장 최근에 변경된 입력값과 그 값이 나타내는 단위를 저장하는 것만으로도 충분하다. 그러고나면 현재의 temperature와 scale에 기반해 다른 입력 필드의 값을 추론할 수 있다. 

    두 입력 필드의 값이 동일한 state로부터 계산되기 때문에 이 둘은 항상 동기화된 상태를 유지하게 된다. 



    class Calculator extends React.Component{
        constructor(props){
            super(props);
            this.handleCelsiusChange = this.handleCelsiusChange.bind(this);
            this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);
            this.state={temperature: '', scale: 'C'};
        }

        handleCelsiusChange(temperature){
            this.setState({scale: 'C', temperature});
        }
        handleFahrenheitChange(temperature){
            this.setState({sclae: 'f', temperature});
        }
        render(){
            const scale = this.state.scale;
            const temperature = this.state.temperature;
            const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;
            const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;

            return (
                <div>
                    <TemperatureInput 
                        scale="C"
                        temperature={celsius}
                        onTemperatureChange={this.handleCelsiusChange}
                        />
                    <TemperatureInput
                        scale="f"
                        temperature={fahrenheit}
                        onTemperatureChange={this.handleFahrenheitChange}
                    />
                    <BoilingVerdict
                        celsius = {parseFloat(celsius)}
                    />
                </div>
            );
        }
    }


    입력값을 변경할 때 일어나는 일들

    REact는 DOM <input>의 onChange에 지정된 함수를 호출한다. 위 예시의 경우 Temperatureinput의 hanldeChange메서드에 해당한다. 

    TemperatureInput 컴포넌트의 handleChange 메서드는 새로 입력된 값과 함께 this.props.onTemepratureChange()를 호출한다. onTemperatureChange를 포함한 이 컴포넌트의 props는 부모 컴포넌트인 Calculator로부터 제공받은 것이다. 

    이전 렌더링 단계에서, Calculator는 섭씨 TemperatureInput의 onTemperatureChange를 Calculator의 handleCelsiusChange메서드로, 화씨 TemperatureInput의 onTemperatureChange를 Calculator의 handleFahrenheitChange 메서드로 지정해놓았다. 따라서 우리가 둘 중 어떤 입력 필드를 수정하느냐에 따라서 Calculator의 두 메서드 중 하나가 호출된다. 

    이들 메서드는 내부적으로 Calculaotr 컴포넌트가 새 입력값, 그리고 현재 수정한 입력 필드의 입력 단위와 함께 this.setState()를 호출하게 함으로써 React에게 자신을 다시 렌더링하도록 요청한다. 

    React는 UI가 어떻게 보여야 하는지 알아내기 위해 Calculator 컴포넌트의 render 메서드를 호출한다. 두 입력필드의 값은 현재 온도와 활성화된 단위를 기반으로 재계산된다. 온도의 변환이 이 단계에서 수행된다. 

    REact는 Calculator가 전달한 새 props와 함께 각 TEmperatureInput 컴포넌트의 render 메서드를 호출한다. 그러면서 UI가 어떻게 보여야 할지를 파악한다. 

    REact는 BoilingVerdict 컴포넌트에게 섭씨온도를 props로 건네면서 그 컴포넌트의 render 메서드를 호출한다. 

    REactDOM은 물의 끓는 여부와 올바른 입력값을 일치시키는 작업과 함께 DOM을 갱신한다. 값을 변경한 입력 필드는 현재 입력값을 그대로 받고, 다른 입력 필드는 변환된 온도 값으로 갱신된다. 

    입력 필드의 값을 변경할 때마다 동일한 절차를 거치고 두 입력 필드는 동기화된 상태로 유지된다.  