Form 


HTML 폼 엘리먼트는 폼엘리먼트 자체가 내부 상태를 가지기 때문에 React의 다른 DOM엘리먼트와 다르게 동작한다. 


EX

    <form>
            <label>
                Name:
                <input type="text" name="name" />
            </label>
            <input type="text" value="submit" />
    </form>

    이 폼은 사용자가 폼을 제출하면 새로운 페이지로 이동하는 기본 HTML 폼 동작을 수행한다. 

    React에서 동일한 동작을 원한다면 그대로 사용하면 된다.

    그러나 대부분의 경우 js함수로 폼의 제출을 처리하고 사용자가 폼에 입력한 데이터에 접근하도록 하는 것이 편리하다. 이를 위한 표준 방식은 제어 컴포넌트라고 불리는 기술을 이용하는 것이다. 

    ----------------------제어 컴포넌트-------------------

    input, textarea, select와 같은 폼엘리먼트는 일반적으로 사용자의 입력을 기반으로 자신의 state를 관리하고 업데이트 한다. React에서는 변경할 수 있는 state가 일반적으로 컴포넌트의 state 속성에 유지되며 setState()에 의해 업데이트 된다.

    REact state를 신뢰 가능한 단일 출처(single source of truth)로 만들어 두 요소를 결합할 수 있다. 
    그러면 폼을 렌더링하는 React 컴포넌트는 폼에 발생하는 사용자 입력값을 제어한다. 이러한 방식으로 React에 의해 값이 제어되는 입력 폼 엘리먼트를 "제어 컴포넌트"라고 한다. 


    EX 전송될 떄 이름을 기록하기 원하는 폼을 제어 컴포넌트로 작성해보자 

    class NameForm extends React.Component{
        constructor(props){
            super(props);
            this.state = {value: ''}
            this.handleChange=this.handleChange.bind(his);
            this.handleSubmit=this.handleSubmit.bind(this);
        }
        hnadleChange(event){
            this.setState({value: event.target.value});
        }
        handleSubmit(event){
            alret('A name was submitted: ' + this.state.value);
            event.preventDefault();
        }
        render(){
            return (
                <form onSubmit={this.handleSubmit}>
                <label>
                    Name:
                    <input type="text" value={this.state.value} onChange={this.handleChange} />
                </label>
                <input type="submit" value="Submit" />
                </form>
            );
        }
    }

    value 어트리뷰트는 폼 엘리먼트에 설정되므로 표시되는 값은 항상 this.state.value가 되고 React state는 신뢰 가능한 단일 출처가 된다. 리엑트 state를 업데이트 하기 위해 모든 키 입력에서 handleChange가 동작하기 때문에 사용자가 입력할 때 보여지는 값이 업데이트된다. 

    제어 컴포넌트로 사용하면, input의 값은 항상 React state에 의해 결정된다. 



    textarea태그

    REact에서 textarea는 value 어트리뷰트를 사용한다. 

    class EassayForm extends React.Component{
        constuctor(props){
            super(props);
            this.state ={
                value: 'please write an eassy about your favoritre DOM element'
            };
            this.handleChange= this.handleChange.bind(this);
            this.handleSubmit= this.handleSubmit.bind(this);
        }
        handleChange(event){
            this.setState({value: event.target.value});
        }
        handleSubmit(event){
            alert('An eassay was submitted: ' + this.state.value);
            event.preventDefault();
        }
        render(){
            return (
                <form onSubmit={this.handleSubmit}>
                 <label>
                  Eassy:
                  <textarea value={this.state.value} onChange={this.handleChange} />
                  </label>
                <input type="submit" value="Submit" />
                </form>
            );
        }
    }
    this.state.value를 생성자에서 초기화 하므로 textarea는 일부 텍스트를 가진채 시작되는 점을 주의하자





    select 태그


    HTML에서 <select>는 드롭 다운 목록을 만듭니다. 예를 들어, 이 HTML은 과일 드롭 다운 목록을 만듭니다.

<select>
  <option value="grapefruit">Grapefruit</option>
  <option value="lime">Lime</option>
  <option selected value="coconut">Coconut</option>
  <option value="mango">Mango</option>
</select>
selected 옵션이 있으므로 Coconut 옵션이 초기값이 되는 점을 주의해주세요. React에서는 selected 어트리뷰트를 사용하는 대신 최상단 select태그에 value 어트리뷰트를 사용합니다. 한 곳에서 업데이트만 하면되기 때문에 제어 컴포넌트에서 사용하기 더 편합니다. 아래는 예시입니다.

class FlavorForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {value: 'coconut'};

    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleChange(event) {
    this.setState({value: event.target.value});
  }

  handleSubmit(event) {
    alert('Your favorite flavor is: ' + this.state.value);
    event.preventDefault();
  }

  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <label>
          Pick your favorite flavor:
          <select value={this.state.value} onChange={this.handleChange}>
            <option value="grapefruit">Grapefruit</option>
            <option value="lime">Lime</option>
            <option value="coconut">Coconut</option>
            <option value="mango">Mango</option>
          </select>
        </label>
        <input type="submit" value="Submit" />
      </form>
    );
  }
}


 주의: select 태그에 multiple 옵션을 허용한다면 value 어트리뷰트에 배열을 전달할 수 있다. 

 <select mulitple={true} value={['B', 'C']}






            file input 태그 

            HTML에서 input type="file" 은 사용자가 하나 이상의 파일을 자신의 장치 저장소에서 서버로 업로드하거나 File API를 통해 js로 조작할 수 있다. 
            <input type="file" />
            값이 읽기 전용이기 때문에 React에서는 비제어 컴포넌트이다. 



            다중입력 제어하기 


            input엘리먼트 여럿을 제어할때 각 엘리먼트에 name 어트리뷰트를 추가하고 event.target.name 값을 통해 핸들러가 어떤 작업을 할 지 선택할 수 있게 해준다. 


            class Reservation extends React.Component{
                constructor(props){
                    super(props);
                    this.state ={
                        isGoging:true,
                        numberOfGuests:2
                    };
                    this.handleInputChange = this.handleInputChange.bind(this);
                }
                handleInputChange(event){
                    const target = event.target;
                    const value = target.type ==='chekbox' ? target.checked: target.value;
                    const name = target.name;
                    this.setState({
                        [name] : value
                    });
                }
                render() {
                    return (
                        <form>
                            <label>
                            Is going:
                            <input
                                name="isGoing"
                                type="checkbox"
                                checked={this.state.isGoing}
                                onChange={this.handleInputChange}
                            />
                            </label>
                            <label>
                                Number of Guests:
                                <input
                                    name="numberOfGuests"
                                    type="number"
                                    value={this.state.numberOfGuests}
                                    onChange={this.handleInputChange}
                                />
                            </label>
                        </form>
                    );
                }
            }

            주어진 input태그의 name에 일치하는 state를 업데이트하기 위해 ES6의 computed property name 구문을 사용하고 있다. 

            (계산된 프로퍼티명)
            this.setState({
                [name]: value
            });

            -----
            let i = 0
            let a = {
                ['foo' + ++i]: i,
                ['foo' + ++i]: i,
                ['foo' + ++i]: i
            }
            console.log(a.foo1)//1
            console.log(a.foo2)//2
            console.log(a.foo3)//3

            const items = ["a", "b", "c"];
            const obj = {
                [items]: "Hello"
            }
            console.log(obj); // A,B,C : "Hello"
            console.log(obj["A, B,C"]) // "Hello"

            let param = 'size'
            let config = {
                [param]: 12,
                ['mobile' + param.charAt(0).toupperCase()+param.slice(1)]:4
            }
            console.log(config) //{size: 12, mobileSize: 4}


            제어되는 input Null값

            제어 컴포넌트에 value prop을 지정하면 의도하지 않는 한 사용자가 변경할 수 없다. 
            value를 설정했는데 여전히 수정할 수 있다면 value를 undeifined나 null로 설정했을 것이다. 

            제어 컴포넌트의 대안

            데이터를 변경할 수 있는 모든 방법에 대해 이벤트 핸들러를 작성하고 React컴포넌트를 통해 모든 입력 상태를 연결해야 하기 때문에 제어 컴포넌트를 사용하는 게 지루할 수 있다. 

            이러한 경우 입력 폼을 구현하기 위한 대체 기술인 비제어 컴포넌트를 보자